name: Release

on:
  push:
    tags:
      - "v*.*.*"

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: OxideDB ${{ github.ref }}
          body: |
            ## What's Changed

            * Cross-platform release for Windows, macOS, and Linux
            * Includes both x86_64 and ARM64 builds where supported

            ## Download Instructions

            Choose the appropriate binary for your platform:

            ### Windows
            - `oxidedb-x86_64-pc-windows-msvc.exe` - Windows x64
            - `oxidedb-aarch64-pc-windows-msvc.exe` - Windows ARM64

            ### macOS
            - `oxidedb-x86_64-apple-darwin` - macOS Intel
            - `oxidedb-aarch64-apple-darwin` - macOS Apple Silicon

            ### Linux
            - `oxidedb-x86_64-unknown-linux-gnu` - Linux x64 (glibc)
            - `oxidedb-aarch64-unknown-linux-gnu` - Linux ARM64 (glibc)
            - `oxidedb-x86_64-unknown-linux-musl` - Linux x64 (musl)
            - `oxidedb-aarch64-unknown-linux-musl` - Linux ARM64 (musl)

            **Verify downloads using the provided checksums.txt file.**
          draft: false
          prerelease: false

  build-release:
    name: Build Release ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            ext: .exe
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            ext: .exe

          # macOS
          - target: x86_64-apple-darwin
            os: macos-latest
            ext: ""
          - target: aarch64-apple-darwin
            os: macos-latest
            ext: ""

          # Linux
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            ext: ""
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            ext: ""
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            ext: ""
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            ext: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install dependencies
        run: |
          case "${{ matrix.os }}" in
            ubuntu-latest)
              sudo apt-get update
              sudo apt-get install -y pkg-config libssl-dev build-essential protobuf-compiler

              if [[ "${{ matrix.target }}" == *"aarch64"* ]]; then
                sudo apt-get install -y gcc-aarch64-linux-gnu
              fi

              if [[ "${{ matrix.target }}" == *"musl"* ]]; then
                sudo apt-get install -y musl-tools
                if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
                  sudo apt-get install -y gcc-aarch64-linux-gnu
                fi
              fi
              ;;
            macos-latest)
              brew install protobuf
              ;;
            windows-latest)
              choco install protoc
              ;;
          esac

      - name: Configure cross-compilation
        if: matrix.os == 'ubuntu-latest'
        run: |
          case "${{ matrix.target }}" in
            aarch64-unknown-linux-gnu)
              echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
              ;;
            aarch64-unknown-linux-musl)
              echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
              ;;
          esac

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create dist directory
        run: mkdir -p dist
        shell: bash

      - name: Prepare binary (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/oxidedb${{ matrix.ext }} dist/oxidedb-${{ matrix.target }}${{ matrix.ext }}
          strip dist/oxidedb-${{ matrix.target }}${{ matrix.ext }} || true

      - name: Prepare binary (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Copy-Item "target\${{ matrix.target }}\release\oxidedb${{ matrix.ext }}" "dist\oxidedb-${{ matrix.target }}${{ matrix.ext }}"
        shell: pwsh

      - name: Generate checksum
        run: |
          cd dist
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            powershell -Command "Get-FileHash oxidedb-${{ matrix.target }}${{ matrix.ext }} -Algorithm SHA256 | Select-Object Hash | Format-Table -HideTableHeaders" | tr -d ' ' > oxidedb-${{ matrix.target }}${{ matrix.ext }}.sha256
          else
            sha256sum oxidedb-${{ matrix.target }}${{ matrix.ext }} > oxidedb-${{ matrix.target }}${{ matrix.ext }}.sha256
          fi
        shell: bash

      - name: Upload Release Asset - Binary
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dist/oxidedb-${{ matrix.target }}${{ matrix.ext }}
          asset_name: oxidedb-${{ matrix.target }}${{ matrix.ext }}
          asset_content_type: application/octet-stream

      - name: Upload Release Asset - Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: dist/oxidedb-${{ matrix.target }}${{ matrix.ext }}.sha256
          asset_name: oxidedb-${{ matrix.target }}${{ matrix.ext }}.sha256
          asset_content_type: text/plain
