name: Build CortexDB for Linux

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  release:
    types: [ created ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-unknown-linux-musl
          - aarch64-unknown-linux-gnu
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y pkg-config libssl-dev build-essential
        if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
          sudo apt-get install -y gcc-aarch64-linux-gnu
        fi
        if [ "${{ matrix.target }}" = "x86_64-unknown-linux-musl" ]; then
          sudo apt-get install -y musl-tools
        fi
    
    - name: Configure cross-compilation
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
    
    - name: Build
      run: cargo build --release --target ${{ matrix.target }}
    
    - name: Run tests
      if: matrix.target == 'x86_64-unknown-linux-gnu'
      run: cargo test --target ${{ matrix.target }}
    
    - name: Create release package
      run: |
        mkdir -p release/${{ matrix.target }}
        cp target/${{ matrix.target }}/release/cortexdb release/${{ matrix.target }}/
        cp README.md release/${{ matrix.target }}/
        cp build-linux.sh release/${{ matrix.target }}/
        cd release && tar -czf cortexdb-${{ matrix.target }}.tar.gz ${{ matrix.target }}
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cortexdb-${{ matrix.target }}
        path: release/cortexdb-${{ matrix.target }}.tar.gz
    
    - name: Upload to release
      if: github.event_name == 'release'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: release/cortexdb-${{ matrix.target }}.tar.gz
        asset_name: cortexdb-${{ matrix.target }}.tar.gz
        asset_content_type: application/gzip

  docker-build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      if: github.event_name == 'release'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name == 'release' }}
        tags: |
          cortexdb/cortexdb:latest
          cortexdb/cortexdb:${{ github.event.release.tag_name || 'dev' }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
