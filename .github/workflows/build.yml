name: Cross-Platform Build

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  release:
    types: [created]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  build:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        include:
          # Windows targets
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            ext: .exe
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            ext: .exe

          # macOS targets
          - target: x86_64-apple-darwin
            os: macos-latest
            ext: ""
          - target: aarch64-apple-darwin
            os: macos-latest
            ext: ""

          # Linux targets
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            ext: ""
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            ext: ""
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            ext: ""
          - target: aarch64-unknown-linux-musl
            os: ubuntu-latest
            ext: ""

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Install dependencies
        run: |
          case "${{ matrix.os }}" in
            ubuntu-latest)
              sudo apt-get update
              sudo apt-get install -y pkg-config libssl-dev build-essential protobuf-compiler

              # Install cross-compilation tools
              if [[ "${{ matrix.target }}" == *"aarch64"* ]]; then
                sudo apt-get install -y gcc-aarch64-linux-gnu
              fi

              # Install musl tools for musl targets
              if [[ "${{ matrix.target }}" == *"musl"* ]]; then
                sudo apt-get install -y musl-tools
                if [[ "${{ matrix.target }}" == "aarch64-unknown-linux-musl" ]]; then
                  sudo apt-get install -y gcc-aarch64-linux-gnu
                fi
              fi
              ;;
            macos-latest)
              brew install protobuf
              ;;
            windows-latest)
              # Install protoc using chocolatey
              choco install protoc
              ;;
          esac

      - name: Configure cross-compilation environment
        if: matrix.os == 'ubuntu-latest'
        run: |
          case "${{ matrix.target }}" in
            aarch64-unknown-linux-gnu)
              echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
              echo "CC_aarch64_unknown_linux_gnu=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
              echo "CXX_aarch64_unknown_linux_gnu=aarch64-linux-gnu-g++" >> $GITHUB_ENV
              ;;
            aarch64-unknown-linux-musl)
              echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_MUSL_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
              echo "CC_aarch64_unknown_linux_musl=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
              echo "CXX_aarch64_unknown_linux_musl=aarch64-linux-gnu-g++" >> $GITHUB_ENV
              ;;
          esac

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create dist directory
        run: |
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            mkdir -p dist
          else
            mkdir -p dist
          fi
        shell: bash

      - name: Copy binary to dist (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          cp target/${{ matrix.target }}/release/oxidedb${{ matrix.ext }} dist/oxidedb-${{ matrix.target }}${{ matrix.ext }}

      - name: Copy binary to dist (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          Copy-Item "target\${{ matrix.target }}\release\oxidedb${{ matrix.ext }}" "dist\oxidedb-${{ matrix.target }}${{ matrix.ext }}"
        shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: oxidedb-${{ matrix.target }}
          path: dist/oxidedb-${{ matrix.target }}${{ matrix.ext }}
          retention-days: 30

  package:
    name: Package all binaries
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release'

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create release package
        run: |
          mkdir -p dist
          find artifacts -name "oxidedb-*" -type f -exec cp {} dist/ \;

          # Create checksums
          cd dist
          sha256sum * > checksums.txt

          # Create archive
          tar -czf ../oxidedb-release.tar.gz *
          cd ..

      - name: Upload release assets
        uses: softprops/action-gh-release@v1
        with:
          files: |
            oxidedb-release.tar.gz
            dist/checksums.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test:
    name: Run tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev protobuf-compiler

      - name: Run tests
        run: cargo test --release

      - name: Run clippy
        run: cargo clippy -- -D warnings

      - name: Check formatting
        run: cargo fmt -- --check

  security:
    name: Security audit
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y protobuf-compiler

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit
